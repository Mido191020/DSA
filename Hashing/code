#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#include <cstdint>
#include <stdexcept>

using namespace std;

class Hash {
public:
    uint32_t Hash32(const std::string& str) {
        uint32_t OffsetBasis = 2166136261;
        uint32_t FNVPrime = 16777619;
        const char* data = str.c_str();
        size_t len = str.length();
        uint8_t* bytes = new uint8_t[len];
        memcpy(bytes, data, len);

        uint32_t hash = OffsetBasis;
        for (size_t i = 0; i < len; ++i) {
            hash = hash ^ bytes[i];
            hash = hash * FNVPrime;
        }

        cout << str << ", " << hash << " , " << hex << hash << dec << endl;
        delete[] bytes;
        return hash;
    }

    uint64_t Hash64(const std::string& str) {
        uint64_t OffsetBasis = 14695981039346656037ull;
        uint64_t FNVPrime = 1099511628211ull;
        const char* data = str.c_str();
        size_t len = str.length();
        uint8_t* bytes = new uint8_t[len];
        memcpy(bytes, data, len);

        uint64_t hash = OffsetBasis;
        for (size_t i = 0; i < len; i++) {
            hash = hash ^ bytes[i];
            hash = hash * FNVPrime;
        }

        cout << str << ", " << hash << ", " << hex << hash << dec << endl;
        delete[] bytes;
        return hash;
    }
};

class HashTable {
public:
    vector<pair<string, string>> entries;
    int size;
    int entrCount;

    HashTable() : size(3), entrCount(0) {
        this->entries = vector<pair<string, string>>(this->size);
    }

    ~HashTable() { this->entries.clear(); }

    int GetHash(const string& key) {
        uint32_t FnvOffsetBasis = 2166136261;
        uint32_t FNVPrime = 16777619;
        const char* data = key.c_str();
        uint32_t hash = FnvOffsetBasis;
        for (size_t i = 0; i < strlen(data); ++i) {
            hash = hash ^ data[i];
            hash = hash * FNVPrime;
        }

        cout << "[hash] " << key << " hash : " << hash << " hex : " << hex << hash << dec << " "
             << hash % static_cast<uint32_t>(this->size) << endl;
        return hash % static_cast<uint32_t>(this->size);
    }

    int CollisionHandling(const string& key, int hash, bool set) {
     int newHash;
        for (int i = 1; i <this->size ; ++i) {
            //Linear probing checks subsequent
            newHash=(hash+i)% this->size;
            cout << "[coll] " << key << " " << hash << ", new hash: " << newHash
                 << endl;
            if (set&&(this->entries[newHash].first==""&&
                    this->entries[newHash].second=="")||
                    this->entries[newHash].first==key){
             return newHash;
            } else if (!set&&this->entries[newHash].first==key){
                return newHash;
            }
        }
        return -1;
    }

    void AddToEntries(const string& key, const string& value) {
       int index= GetHash(key);
       auto iteam=entries[index];
        if (index==-1){
            throw "Invalid Hashtable!!!!";

        }
       //handel if there is a Collision if place مش مناسب
        if (this->entries[index].first!=""&&
        this->entries[index].second!=""
        &&entries[index].first!=key){
            index= this->CollisionHandling(key,index, true);
        }

        //لو المكان فاضي بنحط value
        if (index< this->entries.size()
        && this->entries[index].second!=value
        && this->entries[index].first!=key){
            this->entries[index]=pair<string ,string >({key,value});
            this->entrCount++;
        }
//if not we update the key
        else if(this->entries[index].first==key){
            this->entries[index].second=value;
        } else{
            throw "Invalid Hashtable!!!!";
        }
    }

    void ResizeOrNot() {
        if (this->entrCount< this->entries.size()){
            return;
        }
        int newSize= this->entries.size()*2;
        cout << "[resize] from " << this->size << " to " << newSize << endl;
       //why add the old size
        vector<pair<string ,string >>copy(this->size);
       copy= this->entries;
        this->entries.clear();
        //بنعمل array جديدة بن copy فيها حجات القديمة وبعدين نمسح الarray القديمة ونعدل ال size بتعها وبعدها نضيف العناصر فيها تاني ونمسح ال copy
        this->entries.resize(newSize);
        this->entrCount=0;
        for (int i = 0; i < this->size; ++i) {
            if (copy[i].first==""&&copy[i].second==""){
                continue;
            }
            //why we use this
            this->AddToEntries(copy[i].first,copy[i].second);
        }
        this->size=newSize;
        copy.clear();

    }

    void Set(const string& key, const string& value) {
        this->ResizeOrNot();
        this->AddToEntries(key,value);
    }

    string Get(const string& key) {
       int index= GetHash(key);
       vector<pair<string ,string >>item(this->entries.size());
        if (index< (int)(this->entries.size()) && entries[index].first != key){
            //why false
            index= CollisionHandling(key,index, false);}
            if (index==-1||index>= this->entries.size()){
                return " ";
        }
        if (entries[index].first==key){
            return entries[index].second;
        } else{
            throw "Invalid Hashtable!!!!";
        }
    }

    int Size() { return this->entries.size(); }

    void Print() {
        cout << "-----------" << endl;
        cout << "[Size] " << Size() << endl;

        for (int i = 0; i < Size(); i++) {
            if (entries[i].second == "") {
                cout << "[" << i << "] null" << endl;
            } else {
                cout << "[" << i << "] " << entries[i].first << ":" << entries[i].second << endl;
            }
        }

        cout << "============" << endl;
    }
};
class HashSet {
public:
    vector<string>entries;
    int size;
    int enterCount;
    HashSet():size(3),enterCount(0){
        this->entries=vector<string >(this->size);
    }
    ~HashSet(){
        this->entries.clear();
    }
    int GetHash(const std::string& key) {
        uint32_t FnvOffsetBasis = 2166136261;
        uint32_t FNVPrime = 16777619;
        const char* data = key.c_str();
        uint32_t hash = FnvOffsetBasis;
        for (size_t i = 0; i < strlen(data); ++i) {
            hash = hash ^ data[i];
            hash = hash * FNVPrime;
        }

        return hash % static_cast<uint32_t>(this->size);
    }
    //why const ,why&
    int CollisionHandling(const string&key,int hash){
        int newHash;
        for (int i = 1; i < this->size; ++i) {
            newHash=(hash+i)% this->size;
            if (this->entries[newHash].empty()|| this->entries[newHash]==key){
                return newHash;
            }

        }
        return -1;
    }
   void AddToEntries(const string &key){
        int index= GetHash(key);
       if (index==-1){
           throw std::runtime_error("Invalid HashSet!!!!");
       }
       //mean there is a key in this index so we should handling collesion
       if (!this->entries[index].empty()&& this->entries[index]!=key){
           index=this->CollisionHandling(key,index);
       }
       //mean there is no key in this index
       if (index<this->entries.size()&&this->entries[index]!=key){
           this->entries[index]=key;
           //to know ifI should resize the array or not
           this->enterCount++;
       }
    }
    void ResizeOrNot(){
        if (this->enterCount< this->entries.size()){
            return;
        }
        //why *2? becuse the cose of resize
        int newSiz=this->entries.size()*2;
        std::cout << "[resize] from " << this->size << " to " << newSiz << std::endl;
        vector<string >copy= this->entries;
        this->entries.clear();
        this->entries.resize(newSiz);
        for (int i = 0; i < this->size; ++i) {
            if (!copy.empty()){
                this->AddToEntries(copy[i]);
            }
        }
        this->size=newSiz;
    }
    //explain what is this and the purpose
    void Add(const std::string& key) {
        this->ResizeOrNot();
        this->AddToEntries(key);
    }
    bool contains(const string&key){
        int index= GetHash(key);
        if (index< this->entries.size()&&this->entries[index]!=key){
            index= CollisionHandling(key,index);
        }
        if (index==-1||index>= this->entries.size()){
            return false;
        }
        return this->entries[index]==key;
    }
    void Remove(const string&key){
        int index= GetHash(key);
        //why
        if (index < this->entries.size() && entries[index] != key) {
            index = CollisionHandling(key, index);
        }
        if (index!=-1
        &&index<this->entries.size()
        &&this->entries[index]==key
        ){
            this->entries[index]="";
            this->enterCount--;
        }
    }
   int Search(const string&key){
        int index = GetHash(key);
        if (index < this->entries.size() && entries[index] != key) {
            index = CollisionHandling(key, index);
        }
        if (index != -1 && index < this->entries.size() && entries[index] == key) {
            return index;
        }
        return -1;
    }
    int Size() { return this->enterCount; }
    void Print() {
        std::cout << "-----------" << std::endl;
        std::cout << "[Size] " << Size() << std::endl;

        for (int i = 0; i < this->entries.size(); i++) {
            if (entries[i].empty()) {
                std::cout << "[" << i << "] null" << std::endl;
            } else {
                std::cout << "[" << i << "] " << entries[i] << std::endl;
            }
        }

        std::cout << "============" << std::endl;
    }
};
class HashMap {
public:
    vector<pair<string ,int>>entries;
    int size;
    int enterCount;
    HashMap():size(3),enterCount(0){
        this->entries=vector<pair<string ,int>>(this->size,{"",0});
    }
    ~HashMap(){
        this->entries.clear();
    }
    int GetHash(const std::string& key) {
        uint32_t FnvOffsetBasis = 2166136261;
        uint32_t FNVPrime = 16777619;
        const char* data = key.c_str();
        uint32_t hash = FnvOffsetBasis;
        for (size_t i = 0; i < strlen(data); ++i) {
            hash = hash ^ data[i];
            hash = hash * FNVPrime;
        }
        return hash % static_cast<uint32_t>(this->size);
    }
    int CollisionHandling(const string&key,int hash){
        int newHash;
        for (int i = 1; i < this->size ; ++i) {
            newHash=(hash+i)%this->size;
            if (this->entries[newHash].first.empty()|| this->entries[newHash].first==key){
                return newHash;
            }
        }
        return -1;
    }
    void AddToEntries(const string&key,int value){
        int index= GetHash(key);
        if (index==-1){
            throw std::runtime_error("Invalid HashMap!");
        }
        if (!this->entries[index].first.empty()&& this->entries[index].first!=key){
            index= this->CollisionHandling(key,index);
        }
        if (index< this->entries.size()&&
                (this->entries[index].first.empty()|| this->entries[index].first!=key)){
            this->AddToEntries(key,value);
            this->enterCount++;
        }
    }
    void ResizeOrNot(){
        if (this->enterCount<this->entries.size()){
            return;
        }
        int newSize= this->entries.size()*2;
        vector<pair<string ,int>>copy= this->entries;
        this->entries.clear();
        this->entries.resize(newSize,{"",0});
        for (int i = 0; i < this->size; ++i) {
            if (!copy[i].first.empty()){
                this->AddToEntries(copy[i].first,copy[i].second);
            }
        }
        this->size=newSize;
    }
    //why we make this Add
    void Add(const string& key, int value){
        this->ResizeOrNot();
        this->AddToEntries(key,value);
    }
    bool Contains(const string&key){
        int index= GetHash(key);
        if (index< this->entries.size()
        && this->entries[index].first!=key){
            index= this->CollisionHandling(key,index);
        }
        if (index==-1||index> this->entries.size()){
            return false;
        }
        //why we dont just return true?
        return this->entries[index].first==key;
    }
    //Get purpose?
    bool Get(const string&key,int &value){
        int index= GetHash(key);
        if (index< this->entries.size()
        && this->entries[index].first!=key){
            index= this->CollisionHandling(key,index);
        }
        if (index != -1 && index < this->entries.size() && this->entries[index].first == key) {
            value = this->entries[index].second;
            return true;
        }
        return false;
    }
    void Remove(const string&key){
        int index = GetHash(key);
        if (index < this->entries.size() && this->entries[index].first != key) {
            index = CollisionHandling(key, index);
        }
        if (index != -1 && index < this->entries.size() && this->entries[index].first == key) {
            this->entries[index] = {"", 0};
            this->enterCount--;
        }

    }
    int Size() const { return this->enterCount; }
    void Print() {
        std::cout << "-----------" << std::endl;
        std::cout << "[Size] " << Size() << std::endl;
        for (int i = 0; i < this->entries.size(); i++) {
            if (entries[i].first.empty()) {
                std::cout << "[" << i << "] null" << std::endl;
            } else {
                std::cout << "[" << i << "] " << entries[i].first << " -> " << entries[i].second << std::endl;
            }
        }
        std::cout << "============" << std::endl;
    }
    bool find(const string&key,int & value){
        int index = GetHash(key);
        if (index < this->entries.size() && this->entries[index].first != key) {
            index = this->CollisionHandling(key, index);
        }
        if (index != -1 && index < this->entries.size() && this->entries[index].first == key) {
            value = this->entries[index].second;
            return true;
        }
        return false;
    }
};
int main() {
    HashTable table;
    table.Print();
    table.Set("Sinar", "sinar@gmail.com");
    table.Set("Elvis", "elvis@gmail.com");
    table.Set("Tane", "tane@gmail.com");
    cout << "[get] " << table.Get("Sinar") << endl;
    table.Set("Gerti", "gerti@gmail.com");
    table.Set("Arist", "arist@gmail.com");
    cout << "[get] " << table.Get("Sinar") << endl;
}
